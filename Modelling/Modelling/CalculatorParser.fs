// Implementation file for parser generated by fsyacc
module CalculatorParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "CalculatorParser.fsp"

open CalculatorTypesAST

# 10 "CalculatorParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LSBRACK
  | RSBRACK
  | LPAR
  | RPAR
  | TRUE
  | EOF
  | INTDIV
  | FALSE
  | EAGERAND
  | EAGEROR
  | SHORTAND
  | SHORTOR
  | NEG
  | EQUAL
  | GEQUAL
  | GREATER
  | INEQUAL
  | LEQUAL
  | LESSER
  | ASSIGN
  | SKIP
  | CLINE
  | IF
  | FI
  | DO
  | OD
  | NSTAT
  | FUNC
  | VARNAME of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LSBRACK
    | TOKEN_RSBRACK
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_TRUE
    | TOKEN_EOF
    | TOKEN_INTDIV
    | TOKEN_FALSE
    | TOKEN_EAGERAND
    | TOKEN_EAGEROR
    | TOKEN_SHORTAND
    | TOKEN_SHORTOR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_GEQUAL
    | TOKEN_GREATER
    | TOKEN_INEQUAL
    | TOKEN_LEQUAL
    | TOKEN_LESSER
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_CLINE
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_NSTAT
    | TOKEN_FUNC
    | TOKEN_VARNAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expressionA
    | NONTERM_expressionB
    | NONTERM_expressionC
    | NONTERM_expressionGC

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LSBRACK  -> 5 
  | RSBRACK  -> 6 
  | LPAR  -> 7 
  | RPAR  -> 8 
  | TRUE  -> 9 
  | EOF  -> 10 
  | INTDIV  -> 11 
  | FALSE  -> 12 
  | EAGERAND  -> 13 
  | EAGEROR  -> 14 
  | SHORTAND  -> 15 
  | SHORTOR  -> 16 
  | NEG  -> 17 
  | EQUAL  -> 18 
  | GEQUAL  -> 19 
  | GREATER  -> 20 
  | INEQUAL  -> 21 
  | LEQUAL  -> 22 
  | LESSER  -> 23 
  | ASSIGN  -> 24 
  | SKIP  -> 25 
  | CLINE  -> 26 
  | IF  -> 27 
  | FI  -> 28 
  | DO  -> 29 
  | OD  -> 30 
  | NSTAT  -> 31 
  | FUNC  -> 32 
  | VARNAME _ -> 33 
  | NUM _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LSBRACK 
  | 6 -> TOKEN_RSBRACK 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_RPAR 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_EOF 
  | 11 -> TOKEN_INTDIV 
  | 12 -> TOKEN_FALSE 
  | 13 -> TOKEN_EAGERAND 
  | 14 -> TOKEN_EAGEROR 
  | 15 -> TOKEN_SHORTAND 
  | 16 -> TOKEN_SHORTOR 
  | 17 -> TOKEN_NEG 
  | 18 -> TOKEN_EQUAL 
  | 19 -> TOKEN_GEQUAL 
  | 20 -> TOKEN_GREATER 
  | 21 -> TOKEN_INEQUAL 
  | 22 -> TOKEN_LEQUAL 
  | 23 -> TOKEN_LESSER 
  | 24 -> TOKEN_ASSIGN 
  | 25 -> TOKEN_SKIP 
  | 26 -> TOKEN_CLINE 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_FI 
  | 29 -> TOKEN_DO 
  | 30 -> TOKEN_OD 
  | 31 -> TOKEN_NSTAT 
  | 32 -> TOKEN_FUNC 
  | 33 -> TOKEN_VARNAME 
  | 34 -> TOKEN_NUM 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expressionA 
    | 3 -> NONTERM_expressionA 
    | 4 -> NONTERM_expressionA 
    | 5 -> NONTERM_expressionA 
    | 6 -> NONTERM_expressionA 
    | 7 -> NONTERM_expressionA 
    | 8 -> NONTERM_expressionA 
    | 9 -> NONTERM_expressionA 
    | 10 -> NONTERM_expressionA 
    | 11 -> NONTERM_expressionA 
    | 12 -> NONTERM_expressionB 
    | 13 -> NONTERM_expressionB 
    | 14 -> NONTERM_expressionB 
    | 15 -> NONTERM_expressionB 
    | 16 -> NONTERM_expressionB 
    | 17 -> NONTERM_expressionB 
    | 18 -> NONTERM_expressionB 
    | 19 -> NONTERM_expressionB 
    | 20 -> NONTERM_expressionB 
    | 21 -> NONTERM_expressionB 
    | 22 -> NONTERM_expressionB 
    | 23 -> NONTERM_expressionB 
    | 24 -> NONTERM_expressionB 
    | 25 -> NONTERM_expressionB 
    | 26 -> NONTERM_expressionC 
    | 27 -> NONTERM_expressionC 
    | 28 -> NONTERM_expressionC 
    | 29 -> NONTERM_expressionC 
    | 30 -> NONTERM_expressionC 
    | 31 -> NONTERM_expressionC 
    | 32 -> NONTERM_expressionGC 
    | 33 -> NONTERM_expressionGC 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LSBRACK  -> "LSBRACK" 
  | RSBRACK  -> "RSBRACK" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | TRUE  -> "TRUE" 
  | EOF  -> "EOF" 
  | INTDIV  -> "INTDIV" 
  | FALSE  -> "FALSE" 
  | EAGERAND  -> "EAGERAND" 
  | EAGEROR  -> "EAGEROR" 
  | SHORTAND  -> "SHORTAND" 
  | SHORTOR  -> "SHORTOR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | GEQUAL  -> "GEQUAL" 
  | GREATER  -> "GREATER" 
  | INEQUAL  -> "INEQUAL" 
  | LEQUAL  -> "LEQUAL" 
  | LESSER  -> "LESSER" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | CLINE  -> "CLINE" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | NSTAT  -> "NSTAT" 
  | FUNC  -> "FUNC" 
  | VARNAME _ -> "VARNAME" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LSBRACK  -> (null : System.Object) 
  | RSBRACK  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | INTDIV  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EAGERAND  -> (null : System.Object) 
  | EAGEROR  -> (null : System.Object) 
  | SHORTAND  -> (null : System.Object) 
  | SHORTOR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | GEQUAL  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | INEQUAL  -> (null : System.Object) 
  | LEQUAL  -> (null : System.Object) 
  | LESSER  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | CLINE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | NSTAT  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | VARNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 26us; 65535us; 6us; 7us; 27us; 9us; 28us; 10us; 29us; 11us; 30us; 12us; 31us; 13us; 32us; 14us; 33us; 15us; 34us; 16us; 45us; 17us; 46us; 17us; 47us; 17us; 48us; 17us; 49us; 18us; 50us; 17us; 51us; 19us; 52us; 20us; 53us; 21us; 54us; 22us; 55us; 23us; 58us; 24us; 59us; 25us; 61us; 26us; 66us; 17us; 69us; 17us; 74us; 17us; 9us; 65535us; 34us; 43us; 45us; 38us; 46us; 39us; 47us; 40us; 48us; 41us; 50us; 42us; 66us; 44us; 69us; 44us; 74us; 44us; 3us; 65535us; 0us; 2us; 65us; 63us; 72us; 64us; 3us; 65535us; 66us; 67us; 69us; 70us; 74us; 73us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 30us; 40us; 44us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 29us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 6us; 4us; 5us; 6us; 7us; 8us; 9us; 1us; 4us; 6us; 5us; 5us; 6us; 7us; 8us; 9us; 6us; 5us; 6us; 6us; 7us; 8us; 9us; 6us; 5us; 6us; 7us; 7us; 8us; 9us; 6us; 5us; 6us; 7us; 8us; 8us; 9us; 6us; 5us; 6us; 7us; 8us; 9us; 9us; 6us; 5us; 6us; 7us; 8us; 9us; 10us; 6us; 5us; 6us; 7us; 8us; 9us; 11us; 12us; 5us; 6us; 7us; 8us; 9us; 11us; 18us; 20us; 21us; 22us; 23us; 24us; 11us; 5us; 6us; 7us; 8us; 9us; 18us; 20us; 21us; 22us; 23us; 24us; 6us; 5us; 6us; 7us; 8us; 9us; 18us; 6us; 5us; 6us; 7us; 8us; 9us; 20us; 6us; 5us; 6us; 7us; 8us; 9us; 21us; 6us; 5us; 6us; 7us; 8us; 9us; 22us; 6us; 5us; 6us; 7us; 8us; 9us; 23us; 6us; 5us; 6us; 7us; 8us; 9us; 24us; 6us; 5us; 6us; 7us; 8us; 9us; 26us; 6us; 5us; 6us; 7us; 8us; 9us; 27us; 6us; 5us; 6us; 7us; 8us; 9us; 27us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 2us; 11us; 25us; 1us; 11us; 1us; 12us; 1us; 13us; 5us; 14us; 14us; 15us; 16us; 17us; 5us; 14us; 15us; 15us; 16us; 17us; 5us; 14us; 15us; 16us; 16us; 17us; 5us; 14us; 15us; 16us; 17us; 17us; 5us; 14us; 15us; 16us; 17us; 19us; 5us; 14us; 15us; 16us; 17us; 25us; 5us; 14us; 15us; 16us; 17us; 32us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 2us; 29us; 29us; 2us; 29us; 32us; 1us; 29us; 1us; 30us; 2us; 30us; 33us; 1us; 30us; 1us; 31us; 2us; 31us; 33us; 1us; 31us; 1us; 32us; 2us; 33us; 33us; 1us; 33us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 14us; 16us; 23us; 25us; 32us; 39us; 46us; 53us; 60us; 67us; 74us; 87us; 99us; 106us; 113us; 120us; 127us; 134us; 141us; 148us; 155us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 179us; 181us; 183us; 185us; 191us; 197us; 203us; 209us; 215us; 221us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 254us; 256us; 258us; 260us; 262us; 264us; 267us; 270us; 272us; 274us; 277us; 279us; 281us; 284us; 286us; 288us; 291us; |]
let _fsyacc_action_rows = 75
let _fsyacc_actionTableElements = [|4us; 32768us; 25us; 62us; 27us; 66us; 29us; 69us; 33us; 57us; 0us; 49152us; 2us; 32768us; 10us; 3us; 26us; 65us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 5us; 6us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 6us; 32768us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 6us; 8us; 0us; 16388us; 1us; 16389us; 4us; 31us; 1us; 16390us; 4us; 31us; 3us; 16391us; 0us; 27us; 1us; 28us; 4us; 31us; 3us; 16392us; 0us; 27us; 1us; 28us; 4us; 31us; 1us; 16393us; 4us; 31us; 3us; 16394us; 0us; 27us; 1us; 28us; 4us; 31us; 6us; 32768us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 8us; 35us; 12us; 32768us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 8us; 35us; 18us; 51us; 19us; 52us; 20us; 53us; 21us; 49us; 22us; 54us; 23us; 55us; 11us; 32768us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 18us; 51us; 19us; 52us; 20us; 53us; 21us; 49us; 22us; 54us; 23us; 55us; 5us; 16402us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16404us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16405us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16406us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16407us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16408us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 5us; 16410us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 6us; 32768us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 6us; 60us; 5us; 16411us; 0us; 27us; 1us; 28us; 2us; 29us; 3us; 30us; 4us; 31us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 4us; 16398us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 4us; 16399us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 4us; 16400us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 4us; 16401us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 4us; 16403us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 5us; 32768us; 8us; 56us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 5us; 32768us; 13us; 47us; 14us; 48us; 15us; 45us; 16us; 46us; 32us; 72us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 0us; 16409us; 2us; 32768us; 5us; 59us; 24us; 58us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 1us; 32768us; 24us; 61us; 4us; 32768us; 3us; 32us; 7us; 33us; 33us; 5us; 34us; 4us; 0us; 16412us; 1us; 16413us; 26us; 65us; 1us; 16416us; 26us; 65us; 4us; 32768us; 25us; 62us; 27us; 66us; 29us; 69us; 33us; 57us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 2us; 32768us; 28us; 68us; 31us; 74us; 0us; 16414us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; 2us; 32768us; 30us; 71us; 31us; 74us; 0us; 16415us; 4us; 32768us; 25us; 62us; 27us; 66us; 29us; 69us; 33us; 57us; 1us; 16417us; 31us; 74us; 7us; 32768us; 3us; 32us; 7us; 34us; 9us; 36us; 12us; 37us; 17us; 50us; 33us; 5us; 34us; 4us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 11us; 13us; 18us; 25us; 26us; 28us; 30us; 34us; 38us; 40us; 44us; 51us; 64us; 76us; 82us; 88us; 94us; 100us; 106us; 112us; 118us; 125us; 131us; 136us; 141us; 146us; 151us; 156us; 161us; 166us; 174us; 175us; 176us; 177us; 182us; 187us; 192us; 197us; 202us; 208us; 214us; 222us; 230us; 238us; 246us; 251us; 259us; 264us; 269us; 274us; 279us; 284us; 285us; 288us; 293us; 298us; 300us; 305us; 306us; 308us; 310us; 315us; 323us; 326us; 327us; 335us; 338us; 339us; 344us; 346us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 307 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 316 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "CalculatorParser.fsp"
                                                          _1 
                   )
# 36 "CalculatorParser.fsp"
                 : statementC));
# 327 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CalculatorParser.fsp"
                                        Number(_1) 
                   )
# 46 "CalculatorParser.fsp"
                 : statementA));
# 338 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CalculatorParser.fsp"
                                            Variable(_1) 
                   )
# 47 "CalculatorParser.fsp"
                 : statementA));
# 349 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "CalculatorParser.fsp"
                                                                   Array(_1, _3)
                   )
# 48 "CalculatorParser.fsp"
                 : statementA));
# 361 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CalculatorParser.fsp"
                                                           Mul(_1,_3) 
                   )
# 49 "CalculatorParser.fsp"
                 : statementA));
# 373 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CalculatorParser.fsp"
                                                          Div(_1,_3) 
                   )
# 50 "CalculatorParser.fsp"
                 : statementA));
# 385 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CalculatorParser.fsp"
                                                          Sum(_1,_3) 
                   )
# 51 "CalculatorParser.fsp"
                 : statementA));
# 397 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CalculatorParser.fsp"
                                                           Diff(_1,_3) 
                   )
# 52 "CalculatorParser.fsp"
                 : statementA));
# 409 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CalculatorParser.fsp"
                                                          Pow(_1,_3) 
                   )
# 53 "CalculatorParser.fsp"
                 : statementA));
# 421 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CalculatorParser.fsp"
                                                  Neg(_2) 
                   )
# 54 "CalculatorParser.fsp"
                 : statementA));
# 432 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CalculatorParser.fsp"
                                                     _2 
                   )
# 55 "CalculatorParser.fsp"
                 : statementA));
# 443 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CalculatorParser.fsp"
                                       True 
                   )
# 58 "CalculatorParser.fsp"
                 : statementB));
# 453 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CalculatorParser.fsp"
                                        False 
                   )
# 59 "CalculatorParser.fsp"
                 : statementB));
# 463 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CalculatorParser.fsp"
                                                            ShortAnd(_1,_3) 
                   )
# 60 "CalculatorParser.fsp"
                 : statementB));
# 475 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CalculatorParser.fsp"
                                                            ShortOr(_1,_3) 
                   )
# 61 "CalculatorParser.fsp"
                 : statementB));
# 487 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "CalculatorParser.fsp"
                                                            EagerAnd(_1,_3) 
                   )
# 62 "CalculatorParser.fsp"
                 : statementB));
# 499 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CalculatorParser.fsp"
                                                            EagerOr(_1,_3) 
                   )
# 63 "CalculatorParser.fsp"
                 : statementB));
# 511 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CalculatorParser.fsp"
                                                            Inequality(_1,_3) 
                   )
# 64 "CalculatorParser.fsp"
                 : statementB));
# 523 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CalculatorParser.fsp"
                                                Negation(_2) 
                   )
# 65 "CalculatorParser.fsp"
                 : statementB));
# 534 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CalculatorParser.fsp"
                                                          Equality(_1,_3) 
                   )
# 66 "CalculatorParser.fsp"
                 : statementB));
# 546 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CalculatorParser.fsp"
                                                           GreaterOrEqual(_1,_3) 
                   )
# 67 "CalculatorParser.fsp"
                 : statementB));
# 558 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CalculatorParser.fsp"
                                                            Greater(_1,_3) 
                   )
# 68 "CalculatorParser.fsp"
                 : statementB));
# 570 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CalculatorParser.fsp"
                                                           LessOrEqual(_1,_3) 
                   )
# 69 "CalculatorParser.fsp"
                 : statementB));
# 582 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CalculatorParser.fsp"
                                                            Less(_1,_3) 
                   )
# 70 "CalculatorParser.fsp"
                 : statementB));
# 594 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CalculatorParser.fsp"
                                                    _2 
                   )
# 71 "CalculatorParser.fsp"
                 : statementB));
# 605 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CalculatorParser.fsp"
                                                              Assign(_1,_3) 
                   )
# 74 "CalculatorParser.fsp"
                 : statementC));
# 617 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : statementA)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CalculatorParser.fsp"
                                                                                    AssignArray(_1,_3,_6) 
                   )
# 75 "CalculatorParser.fsp"
                 : statementC));
# 630 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CalculatorParser.fsp"
                                              Skip 
                   )
# 76 "CalculatorParser.fsp"
                 : statementC));
# 640 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementC)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CalculatorParser.fsp"
                                                                Commandline(_1,_3) 
                   )
# 77 "CalculatorParser.fsp"
                 : statementC));
# 652 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementGC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CalculatorParser.fsp"
                                                        IfStat(_2) 
                   )
# 78 "CalculatorParser.fsp"
                 : statementC));
# 663 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : statementGC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CalculatorParser.fsp"
                                                        DoStat(_2) 
                   )
# 79 "CalculatorParser.fsp"
                 : statementC));
# 674 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementB)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CalculatorParser.fsp"
                                                            FunctionStat(_1,_3) 
                   )
# 82 "CalculatorParser.fsp"
                 : statementGC));
# 686 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : statementGC)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : statementGC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CalculatorParser.fsp"
                                                               NextStat(_1,_3) 
                   )
# 83 "CalculatorParser.fsp"
                 : statementGC));
|]
# 699 "CalculatorParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : statementC =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
