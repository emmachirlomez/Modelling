// Open the file that defines the type "expr" we shall use as AST
%{
open CalculatorTypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VARNAME
%token TIMES DIV PLUS MINUS POW LSBRACK RSBRACK LPAR RPAR TRUE EOF INTDIV FALSE EAGERAND EAGEROR SHORTAND SHORTOR NEG EQUAL GEQUAL GREATER INEQUAL LEQUAL LESSER ASSIGN SKIP CLINE IF FI DO OD NSTAT FUNC
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right POW
%left PLUS MINUS 
%left TIMES DIV


%left EAGEROR SHORTOR
%left EAGEREND SHORTAND
%left NEG

%right CLINE NSTAT 

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <statementC> start
%type <statementA> expressionA2 expressionA 
%type <statementB> expressionB
%type <statementC> expressionC
%type <statementGC> expressionGC

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expressionC EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:


expressionA2:
  | MINUS expressionA		                { Neg($2) }
  | expressionA							    { $1 }

expressionA:
  | NUM										{ Number($1) }
  | VARNAME  								{ Variable($1) }
  | VARNAME LSBRACK expressionA RSBRACK     { Array($1, $3)}
  | expressionA TIMES expressionA			{ Mul($1,$3) }
  | expressionA DIV expressionA				{ Div($1,$3) }
  | expressionA PLUS expressionA			{ Sum($1,$3) }
  | expressionA MINUS expressionA			{ Diff($1,$3) }
  | expressionA POW expressionA				{ Pow($1,$3) }
  | MINUS expressionA						{ Neg($2) }
  | LPAR expressionA RPAR					{ $2 }

expressionB:
  | TRUE							 { True }
  | FALSE							 { False }
  | expressionB SHORTAND expressionB { ShortAnd($1,$3) }
  | expressionB SHORTOR expressionB  { ShortOr($1,$3) }
  | expressionB EAGERAND expressionB { EagerAnd($1,$3) }
  | expressionB EAGEROR expressionB  { EagerOr($1,$3) }
  | expressionA INEQUAL expressionA  { Inequality($1,$3) }
  | NEG expressionB					 { Negation($2) }
  | expressionA EQUAL expressionA	 { Equality($1,$3) }
  | expressionA GEQUAL expressionA	 { GreaterOrEqual($1,$3) }
  | expressionA GREATER expressionA  { Greater($1,$3) }
  | expressionA LEQUAL expressionA	 { LessOrEqual($1,$3) }
  | expressionA LESSER expressionA   { Less($1,$3) }
  | LPAR expressionB RPAR			 { $2 }

expressionC:
  | VARNAME ASSIGN expressionA								 { Assign($1,$3) } 
  | VARNAME LSBRACK expressionA RSBRACK ASSIGN expressionA   { AssignArray($1,$3,$6) }
  | SKIP	 												 { Skip }
  | expressionC CLINE expressionC							 { Commandline($1,$3) }
  | IF expressionGC FI										 { IfStat($2) }
  | DO expressionGC OD										 { DoStat($2) }

expressionGC:
  | expressionB FUNC expressionC					{ FunctionStat($1,$3) }
  | expressionGC NSTAT expressionGC					{ NextStat($1,$3) }
 

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
